import pytest
from langsmith import testing
import json

from resumetailor.llm import cover_letter_writer
from resumetailor.models import CoverLetter, Resume, JobProfile
from resumetailor.services.utils import model_to_str

from tests.utils import score_content

system_message = """
You are an expert reviewer specializing in evaluating AI-generated cover letters. Your task is to critically assess the quality of a cover letter that has been generated by an LLM for a specific job application. Your review must be thorough, objective, and cover multiple aspects, including but not limited to: relevance to the job profile, alignment with the candidate's resume, clarity, professionalism, and faithfulness to the provided information. Pay special attention to any hallucinations or unsupported claims in the cover letter, as accuracy and truthful representation are paramount.
"""

prompt = """
**Job Profile (JSON):**
---
```json
{job_profile}
```
---

**Candidate Resume (JSON):**
---
```json
{candidate_resume}
```
---

Please review the following cover letter in the context of the provided job profile and candidate resume. All data is provided in JSON format. Address each of the following aspects in detail:

- Relevance: How well does the cover letter address the requirements and expectations of the job profile?
- Alignment: Does the cover letter accurately reflect the candidate's experience and qualifications as described in the resume?
- Faithfulness: Are all points in the cover letter directly supported by information from the job profile and resume? Identify any hallucinations, exaggerations, or unsupported additions.
- Clarity and Professionalism: Is the cover letter well-structured, clear, and professional? Are there any issues with formatting, language, or tone?
- Additional Observations: Note any other strengths, weaknesses, or areas for improvement.

**Cover Letter (JSON):**
---
```json
{cover_letter}
```
---

Provide a comprehensive, structured review with specific examples and actionable feedback for each aspect. Assign a score (1-100) to each aspect and conclude the review with a final score (1-100).
"""


@pytest.fixture
def loaded_job_profile(test_data_with_job_dir):
    with open(test_data_with_job_dir / "job_profile.json", "r") as f:
        job_profile_dict = json.load(f)
    return JobProfile(**job_profile_dict)


@pytest.fixture
def loaded_resume(test_data_dir):
    with open(test_data_dir / "full_resume.json", "r") as f:
        resume_dict = json.load(f)
    return Resume(**resume_dict)


@pytest.mark.langsmith
@pytest.mark.cover_letter
def test_cover_letter_writer(loaded_job_profile, loaded_resume):
    cover_letter = cover_letter_writer.generate(
        thread_id="test",
        job_profile=model_to_str(loaded_job_profile, "json"),
        candidate_resume=model_to_str(loaded_resume, "json"),
        job_description=None,
    )
    assert isinstance(
        cover_letter, CoverLetter
    ), "Cover letter is not an instance of the CoverLetter schema"
    score_result = score_content(
        system_message=system_message,
        prompt=prompt,
        job_profile=model_to_str(loaded_job_profile, "json"),
        candidate_resume=model_to_str(loaded_resume, "json"),
        cover_letter=model_to_str(cover_letter, "json"),
    )
    assert score_result.score > 50
